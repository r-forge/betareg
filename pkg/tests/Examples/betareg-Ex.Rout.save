
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "betareg"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('betareg')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Beta01")
> ### * Beta01
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Beta01
> ### Title: Create a Zero- and/or One-Inflated Beta Distribution
> ### Aliases: Beta01 mean.Beta01 variance.Beta01 skewness.Beta01
> ###   kurtosis.Beta01 pdf.Beta01 log_pdf.Beta01 cdf.Beta01 quantile.Beta01
> ###   random.Beta01 support.Beta01 is_discrete.Beta01 is_continuous.Beta01
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
Loading required namespace: distributions3
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three beta distributions
> X <- Beta01(
+   mu  = c(0.25, 0.50, 0.75),
+   phi = c(1, 1, 2),
+   p0 = c(0.1, 0, 0),
+   p1 = c(0, 0, 0.3)
+ )
> X
[1] "Beta01(mu = 0.25, phi = 1, p0 = 0.1, p1 = 0.0)"
[2] "Beta01(mu = 0.50, phi = 1, p0 = 0.0, p1 = 0.0)"
[3] "Beta01(mu = 0.75, phi = 2, p0 = 0.0, p1 = 0.3)"
> 
> ## compute moments of the distribution
> mean(X)
[1] 0.225 0.500 0.825
> variance(X)
[1] 0.090000 0.125000 0.056875
> 
> ## support interval (minimum and maximum)
> support(X)
     min max
[1,]   0   1
[2,]   0   1
[3,]   0   1
> 
> ## simulate random variables
> random(X, 5)
            r_1         r_2         r_3        r_4       r_5
[1,] 0.01770077 0.031967958 0.009185013 0.09774271 0.5297302
[2,] 0.11888790 0.004743561 0.209872794 0.56026234 0.7010201
[3,] 0.43181699 0.757365599 0.612582662 0.76991426 0.3122026
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ])
> hist(x[2, ])
> hist(x[3, ])
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(0.25, 0.5, 0.75)
> pdf(X, x)
[1] 0.6156832 0.6366198 0.7718605
> pdf(X, x, log = TRUE)
[1] -0.4850227 -0.4515827 -0.2589515
> log_pdf(X, x)
[1] -0.4850227 -0.4515827 -0.2589515
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.6808374 0.5000000 0.2737016
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.05868041 0.50000000 0.94876688
> 
> ## cdf() and quantile() are inverses
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## point mass probabilities (if any) on boundary
> cdf(X, 0, lower.tail = TRUE)
[1] 0.1 0.0 0.0
> cdf(X, 1, lower.tail = FALSE)
[1] 0.0 0.0 0.3
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
         q_0.05      q_0.5    q_0.95
[1,] 0.00000000 0.05868041 0.8991438
[2,] 0.00615583 0.50000000 0.9938442
[3,] 0.28573175 0.94876688 1.0000000
> quantile(X, p, elementwise = TRUE)
[1] 0.0 0.5 1.0
> quantile(X, p, elementwise = TRUE, drop = FALSE)
     quantile
[1,]      0.0
[2,]      0.5
[3,]      1.0
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]       0.225 0.2275291
[2,]       0.500 0.5091324
[3,]       0.825 0.8103725
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("Beta4")
> ### * Beta4
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Beta4
> ### Title: Create a 4-Parameter Beta Distribution
> ### Aliases: Beta4 mean.Beta4 variance.Beta4 skewness.Beta4 kurtosis.Beta4
> ###   pdf.Beta4 log_pdf.Beta4 cdf.Beta4 quantile.Beta4 random.Beta4
> ###   support.Beta4 is_discrete.Beta4 is_continuous.Beta4
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three beta distributions
> X <- Beta4(
+   mu  = c(0.25, 0.50, 0.75),
+   phi = c(1, 1, 2),
+   theta1 = c(0, -0.1, -0.1),
+   theta2 = c(1, 1.1, 1.5)
+ )
> X
[1] "Beta4(mu = 0.25, phi = 1, theta1 =  0.0, theta2 = 1.0)"
[2] "Beta4(mu = 0.50, phi = 1, theta1 = -0.1, theta2 = 1.1)"
[3] "Beta4(mu = 0.75, phi = 2, theta1 = -0.1, theta2 = 1.5)"
> 
> ## compute moments of the distribution
> mean(X)
[1] 0.25 0.50 1.10
> variance(X)
[1] 0.09375 0.18000 0.16000
> 
> ## support interval (minimum and maximum)
> support(X)
      min max
[1,]  0.0 1.0
[2,] -0.1 1.1
[3,] -0.1 1.5
> 
> ## simulate random variables
> random(X, 5)
           r_1       r_2         r_3        r_4         r_5
[1,] 0.7497152 0.8385523  0.03196796 0.91882879  0.54543668
[2,] 0.1263742 1.0978772 -0.09430773 0.07151503 -0.00499443
[3,] 1.4311350 1.4850582  1.11178496 1.36985916  1.24450679
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ])
> hist(x[2, ])
> hist(x[3, ])
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(0.25, 0.5, 0.75)
> pdf(X, x)
[1] 0.6840925 0.5305165 0.4235834
> pdf(X, x, log = TRUE)
[1] -0.3796622 -0.6339043 -0.8590048
> log_pdf(X, x)
[1] -0.3796622 -0.6339043 -0.8590048
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.6453748 0.5000000 0.2022198
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.09331223 0.50000000 1.23888962
> 
> ## cdf() and quantile() are inverses
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
            q_0.05      q_0.5    q_0.95
[1,]  9.512588e-06 0.09331223 0.9118445
[2,] -9.261300e-02 0.50000000 1.0926130
[3,]  2.656317e-01 1.23888962 1.4975313
> quantile(X, p, elementwise = TRUE)
[1] 9.512588e-06 5.000000e-01 1.497531e+00
> quantile(X, p, elementwise = TRUE, drop = FALSE)
         quantile
[1,] 9.512588e-06
[2,] 5.000000e-01
[3,] 1.497531e+00
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]        0.25 0.2464581
[2,]        0.50 0.4930360
[3,]        1.10 1.1068752
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("BetaR")
> ### * BetaR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BetaR
> ### Title: Create a Beta Regression Distribution
> ### Aliases: BetaR mean.BetaR variance.BetaR skewness.BetaR kurtosis.BetaR
> ###   pdf.BetaR log_pdf.BetaR cdf.BetaR quantile.BetaR random.BetaR
> ###   support.BetaR is_discrete.BetaR is_continuous.BetaR
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three beta distributions
> X <- BetaR(
+   mu  = c(0.25, 0.50, 0.75),
+   phi = c(1, 1, 2)
+ )
> X
[1] "BetaR(mu = 0.25, phi = 1)" "BetaR(mu = 0.50, phi = 1)"
[3] "BetaR(mu = 0.75, phi = 2)"
> 
> ## compute moments of the distribution
> mean(X)
[1] 0.25 0.50 0.75
> variance(X)
[1] 0.09375 0.12500 0.06250
> skewness(X)
[1] -0.1666667 -1.5000000  0.0000000
> kurtosis(X)
[1] -0.1666667 -1.5000000  0.0000000
> 
> ## support interval (minimum and maximum)
> support(X)
     min max
[1,]   0   1
[2,]   0   1
[3,]   0   1
> 
> ## simulate random variables
> random(X, 5)
           r_1       r_2         r_3       r_4        r_5
[1,] 0.7497152 0.8385523 0.031967958 0.9188288 0.54543668
[2,] 0.1886452 0.9982310 0.004743561 0.1429292 0.07917131
[3,] 0.9569594 0.9906614 0.757365599 0.9186620 0.84031674
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ])
> hist(x[2, ])
> hist(x[3, ])
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(0.25, 0.5, 0.75)
> pdf(X, x)
[1] 0.6840925 0.6366198 1.1026578
> pdf(X, x, log = TRUE)
[1] -0.37966219 -0.45158271  0.09772344
> log_pdf(X, x)
[1] -0.37966219 -0.45158271  0.09772344
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.6453748 0.5000000 0.3910022
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.09331223 0.50000000 0.83680601
> 
> ## cdf() and quantile() are inverses (except at censoring points)
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
           q_0.05      q_0.5    q_0.95
[1,] 9.512588e-06 0.09331223 0.9118445
[2,] 6.155830e-03 0.50000000 0.9938442
[3,] 2.285198e-01 0.83680601 0.9984571
> quantile(X, p, elementwise = TRUE)
[1] 9.512588e-06 5.000000e-01 9.984571e-01
> quantile(X, p, elementwise = TRUE, drop = FALSE)
         quantile
[1,] 9.512588e-06
[2,] 5.000000e-01
[3,] 9.984571e-01
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]        0.25 0.2464581
[2,]        0.50 0.4941967
[3,]        0.75 0.7542970
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("CarTask")
> ### * CarTask
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CarTask
> ### Title: Partition-primed Probability Judgement Task for Car Dealership
> ### Aliases: CarTask
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("CarTask", package = "betareg")
> library("flexmix")
Loading required package: lattice
> car_betamix <- betamix(probability ~ 1, data = CarTask, k = 3,
+   extra_components = list(extraComponent(type = "uniform", coef = 1/2,
+   delta = 0.01), extraComponent(type = "uniform", coef = 1/4, delta = 0.01)),
+   FLXconcomitant = FLXPmultinom(~ task))
> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("FoodExpenditure")
> ### * FoodExpenditure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FoodExpenditure
> ### Title: Proportion of Household Income Spent on Food
> ### Aliases: FoodExpenditure
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("FoodExpenditure", package = "betareg")
> 
> ## Ferrari and Cribari-Neto (2004)
> ## Section 4
> fe_lin <- lm(I(food/income) ~ income + persons, data = FoodExpenditure)
> library("lmtest")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> bptest(fe_lin)

	studentized Breusch-Pagan test

data:  fe_lin
BP = 5.9348, df = 2, p-value = 0.05144

> 
> ## Table 2
> fe_beta <- betareg(I(food/income) ~ income + persons, data = FoodExpenditure)
> summary(fe_beta)

Call:
betareg(formula = I(food/income) ~ income + persons, data = FoodExpenditure)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.7818 -0.4445  0.2024  0.6852  1.8755 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.622548   0.223854  -2.781 0.005418 ** 
income      -0.012299   0.003036  -4.052 5.09e-05 ***
persons      0.118462   0.035341   3.352 0.000802 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    35.61       8.08   4.407 1.05e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 45.33 on 4 Df
Pseudo R-squared: 0.3878
Number of iterations: 28 (BFGS) + 4 (Fisher scoring) 
> 
> 
> 
> cleanEx()

detaching ‘package:lmtest’, ‘package:zoo’

> nameEx("GasolineYield")
> ### * GasolineYield
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GasolineYield
> ### Title: Estimation of Gasoline Yields from Crude Oil
> ### Aliases: GasolineYield
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## IGNORE_RDIFF_BEGIN
> data("GasolineYield", package = "betareg")
> 
> gy1 <- betareg(yield ~ gravity + pressure + temp10 + temp, data = GasolineYield)
> summary(gy1)

Call:
betareg(formula = yield ~ gravity + pressure + temp10 + temp, data = GasolineYield)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.1189 -0.6985 -0.0088  0.6306  2.1572 

Coefficients (mean model with logit link):
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -2.6949422  0.7625693  -3.534 0.000409 ***
gravity      0.0045412  0.0071419   0.636 0.524871    
pressure     0.0304135  0.0281007   1.082 0.279117    
temp10      -0.0110449  0.0022640  -4.879 1.07e-06 ***
temp         0.0105650  0.0005154  20.499  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)   248.24      62.02   4.003 6.26e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 75.68 on 6 Df
Pseudo R-squared: 0.9398
Number of iterations: 147 (BFGS) + 4 (Fisher scoring) 
> 
> ## Ferrari and Cribari-Neto (2004)
> gy2 <- betareg(yield ~ batch + temp, data = GasolineYield)
> ## Table 1
> summary(gy2)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.8750 -0.8149  0.1601  0.8384  2.0483 

Coefficients (mean model with logit link):
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.1595710  0.1823247 -33.784  < 2e-16 ***
batch1       1.7277289  0.1012294  17.067  < 2e-16 ***
batch2       1.3225969  0.1179020  11.218  < 2e-16 ***
batch3       1.5723099  0.1161045  13.542  < 2e-16 ***
batch4       1.0597141  0.1023598  10.353  < 2e-16 ***
batch5       1.1337518  0.1035232  10.952  < 2e-16 ***
batch6       1.0401618  0.1060365   9.809  < 2e-16 ***
batch7       0.5436922  0.1091275   4.982 6.29e-07 ***
batch8       0.4959007  0.1089257   4.553 5.30e-06 ***
batch9       0.3857930  0.1185933   3.253  0.00114 ** 
temp         0.0109669  0.0004126  26.577  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    440.3      110.0   4.002 6.29e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:  84.8 on 12 Df
Pseudo R-squared: 0.9617
Number of iterations: 51 (BFGS) + 3 (Fisher scoring) 
> ## Figure 2
> par(mfrow = c(3, 2))
> plot(gy2, which = 1, type = "pearson", sub.caption = "")
> plot(gy2, which = 1, type = "deviance", sub.caption = "")
> plot(gy2, which = 5, type = "deviance", sub.caption = "")
> plot(gy2, which = 4, type = "pearson", sub.caption = "")
> plot(gy2, which = 2:3)
> par(mfrow = c(1, 1))
> 
> ## exclude 4th observation
> gy2a <- update(gy2, subset = -4)
> gy2a

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield, subset = -4)

Coefficients (mean model with logit link):
(Intercept)       batch1       batch2       batch3       batch4       batch5  
   -6.35647      1.88688      1.37039      1.62512      1.08066      1.15158  
     batch6       batch7       batch8       batch9         temp  
    1.05766      0.56522      0.50066      0.38523      0.01146  

Phi coefficients (precision model with identity link):
(phi)  
577.8  

> summary(gy2a)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield, subset = -4)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.3747 -1.0482  0.1391  0.8703  2.4165 

Coefficients (mean model with logit link):
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.3564713  0.1716020 -37.042  < 2e-16 ***
batch1       1.8868782  0.1001837  18.834  < 2e-16 ***
batch2       1.3703911  0.1042352  13.147  < 2e-16 ***
batch3       1.6251199  0.1028326  15.804  < 2e-16 ***
batch4       1.0806596  0.0897855  12.036  < 2e-16 ***
batch5       1.1515826  0.0906857  12.699  < 2e-16 ***
batch6       1.0576556  0.0929172  11.383  < 2e-16 ***
batch7       0.5652219  0.0956100   5.912 3.39e-09 ***
batch8       0.5006625  0.0953210   5.252 1.50e-07 ***
batch9       0.3852258  0.1037500   3.713 0.000205 ***
temp         0.0114588  0.0003945  29.050  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    577.8      146.7   3.938 8.22e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 86.62 on 12 Df
Pseudo R-squared: 0.9662
Number of iterations: 51 (BFGS) + 4 (Fisher scoring) 
> ## IGNORE_RDIFF_END
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ImpreciseTask")
> ### * ImpreciseTask
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ImpreciseTask
> ### Title: Imprecise Probabilities for Sunday Weather and Boeing Stock Task
> ### Aliases: ImpreciseTask
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("ImpreciseTask", package = "betareg")
> library("flexmix")
Loading required package: lattice
> wt_betamix <- betamix(location ~ difference * task, data = ImpreciseTask, k = 2,
+   extra_components = extraComponent(type = "betareg", coef =
+     list(mean = 0, precision = 8)),
+   FLXconcomitant = FLXPmultinom(~ task))
> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("LossAversion")
> ### * LossAversion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LossAversion
> ### Title: (No) Myopic Loss Aversion in Adolescents
> ### Aliases: LossAversion
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## data for students in higher grades
> data("LossAversion", package = "betareg")
> LossAversion <- subset(LossAversion, grade == "10-12")
> 
> ## ad hoc scaling (a la Smithson & Verkuilen)
> LossAversion$invests <- ((LossAversion$invest * (nrow(LossAversion) - 1) + 0.5)/nrow(LossAversion))
> p01 <- mean(LossAversion$invest <= 0 | LossAversion$invest >= 1)
> 
> ## main effects models: Gaussian, beta, extended-support beta, extended-support beta mixture
> la_gr  <- glm(invest      ~ arrangement + male + age,                      data = LossAversion)
> la_br  <- betareg(invests ~ arrangement + male + age | arrangement + male, data = LossAversion)
> la_xb  <- betareg(invest  ~ arrangement + male + age | arrangement + male, data = LossAversion, dist = "xbeta", nu = p01/2)
Loading required namespace: numDeriv
> la_xbx <- betareg(invest  ~ arrangement + male + age | arrangement + male, data = LossAversion)
> 
> 
> 
> 
> cleanEx()
> nameEx("MockJurors")
> ### * MockJurors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MockJurors
> ### Title: Confidence of Mock Jurors in Their Verdicts
> ### Aliases: MockJurors
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("MockJurors", package = "betareg")
> library("lmtest")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> ## Smithson & Verkuilen (2006, Table 1)
> ## variable dispersion model
> ## (NOTE: numerical rather than analytical Hessian is used for replication,
> ##  Smithson & Verkuilen erroneously compute one-sided p-values)
> mj_vd <- betareg(confidence ~ verdict * conflict | verdict * conflict,
+   data = MockJurors, hessian = TRUE)
> summary(mj_vd)

Call:
betareg(formula = confidence ~ verdict * conflict | verdict * conflict, 
    data = MockJurors, hessian = TRUE)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.4668 -0.6877 -0.1770  0.4669  3.4217 

Coefficients (mean model with logit link):
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)      0.912404   0.103979   8.775  < 2e-16 ***
verdict          0.005035   0.103979   0.048  0.96138    
conflict         0.168573   0.103979   1.621  0.10497    
verdict:conflict 0.280010   0.103979   2.693  0.00708 ** 

Phi coefficients (precision model with log link):
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)        1.1733     0.1278   9.180  < 2e-16 ***
verdict           -0.3299     0.1278  -2.581  0.00985 ** 
conflict           0.2196     0.1278   1.718  0.08576 .  
verdict:conflict   0.3163     0.1278   2.475  0.01334 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 40.12 on 8 Df
Pseudo R-squared: 0.03885
Number of iterations in BFGS optimization: 19 
> 
> ## model selection for beta regression: null model, fixed dispersion model (p. 61)
> mj_null <- betareg(confidence ~ 1 | 1, data = MockJurors)
> mj_fd <-   betareg(confidence ~ verdict * conflict | 1, data = MockJurors)
> lrtest(mj_null, mj_fd)
Likelihood ratio test

Model 1: confidence ~ 1 | 1
Model 2: confidence ~ verdict * conflict | 1
  #Df LogLik Df  Chisq Pr(>Chisq)
1   2 28.226                     
2   5 30.580  3 4.7086     0.1944
> lrtest(mj_null, mj_vd)
Likelihood ratio test

Model 1: confidence ~ 1 | 1
Model 2: confidence ~ verdict * conflict | verdict * conflict
  #Df LogLik Df  Chisq Pr(>Chisq)    
1   2 28.226                         
2   8 40.117  6 23.782  0.0005728 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> ## McFadden's pseudo-R-squared
> 1 - as.vector(logLik(mj_null)/logLik(mj_vd))
[1] 0.296407
> 
> ## visualization
> if(require("lattice")) {
+   histogram(~ confidence | conflict + verdict, data = MockJurors,
+     col = "lightgray", breaks = 0:10/10, type = "density")
+ }
Loading required package: lattice
> 
> ## see demo("SmithsonVerkuilen2006", package = "betareg") for more details
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’, ‘package:lmtest’, ‘package:zoo’

> nameEx("ReadingSkills")
> ### * ReadingSkills
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ReadingSkills
> ### Title: Dyslexia and IQ Predicting Reading Accuracy
> ### Aliases: ReadingSkills
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("ReadingSkills", package = "betareg")
> 
> ## Smithson & Verkuilen (2006, Table 5)
> ## OLS regression
> ## (Note: typo in iq coefficient: 0.3954 instead of 0.3594)
> rs_ols <- lm(qlogis(accuracy) ~ dyslexia * iq, data = ReadingSkills)
> summary(rs_ols)

Call:
lm(formula = qlogis(accuracy) ~ dyslexia * iq, data = ReadingSkills)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.66405 -0.37966  0.03687  0.40887  2.50345 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)   1.6011     0.2259   7.089 1.41e-08 ***
dyslexia     -1.2056     0.2259  -5.338 4.01e-06 ***
iq            0.3594     0.2255   1.594   0.1188    
dyslexia:iq  -0.4229     0.2255  -1.875   0.0681 .  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.2 on 40 degrees of freedom
Multiple R-squared:  0.6151,	Adjusted R-squared:  0.5862 
F-statistic: 21.31 on 3 and 40 DF,  p-value: 2.083e-08

> ## Beta regression (with numerical rather than analytic standard errors)
> ## (Note: Smithson & Verkuilen erroneously compute one-sided p-values)
> rs_beta <- betareg(accuracy ~ dyslexia * iq | dyslexia + iq,
+   data = ReadingSkills, hessian = TRUE)
> summary(rs_beta)

Call:
betareg(formula = accuracy ~ dyslexia * iq | dyslexia + iq, data = ReadingSkills, 
    hessian = TRUE)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.3900 -0.6416  0.1572  0.8524  1.6446 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   1.1232     0.1509   7.444 9.76e-14 ***
dyslexia     -0.7416     0.1515  -4.897 9.74e-07 ***
iq            0.4864     0.1671   2.911 0.003603 ** 
dyslexia:iq  -0.5813     0.1726  -3.368 0.000757 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   3.3044     0.2265  14.589  < 2e-16 ***
dyslexia      1.7466     0.2940   5.941 2.83e-09 ***
iq            1.2291     0.4596   2.674  0.00749 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:  65.9 on 7 Df
Pseudo R-squared: 0.5756
Number of iterations in BFGS optimization: 25 
> 
> ## visualization
> plot(accuracy ~ iq, data = ReadingSkills, col = as.numeric(dyslexia), pch = 19)
> nd <- data.frame(dyslexia = "no", iq = -30:30/10)
> lines(nd$iq, predict(rs_beta, nd))
> lines(nd$iq, plogis(predict(rs_ols, nd)), lty = 2)
> nd <- data.frame(dyslexia = "yes", iq = -30:30/10)
> lines(nd$iq, predict(rs_beta, nd), col = 2)
> lines(nd$iq, plogis(predict(rs_ols, nd)), col = 2, lty = 2)
> legend("topleft", c("Dyslexia: no", "Dyslexia: yes", "OLS", "Beta"),
+   lty = c(0, 0, 2, 1), pch = c(19, 19, NA, NA), col = c(1, 2, 1, 1), bty = "n")
> 
> ## see demo("SmithsonVerkuilen2006", package = "betareg") for more details
> 
> 
> 
> cleanEx()
> nameEx("StressAnxiety")
> ### * StressAnxiety
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StressAnxiety
> ### Title: Dependency of Anxiety on Stress
> ### Aliases: StressAnxiety
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("StressAnxiety", package = "betareg")
> StressAnxiety <- StressAnxiety[order(StressAnxiety$stress),]
> 
> ## Smithson & Verkuilen (2006, Table 4)
> sa_null <- betareg(anxiety ~ 1 | 1,
+   data = StressAnxiety, hessian = TRUE)
> sa_stress <- betareg(anxiety ~ stress | stress,
+   data = StressAnxiety, hessian = TRUE)
> summary(sa_null)

Call:
betareg(formula = anxiety ~ 1 | 1, data = StressAnxiety, hessian = TRUE)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-0.6806 -0.6806 -0.2705  0.6581  2.0002 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) -2.24396    0.09879  -22.71   <2e-16 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    1.796      0.123    14.6   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 239.4 on 2 Df
Number of iterations in BFGS optimization: 9 
> summary(sa_stress)

Call:
betareg(formula = anxiety ~ stress | stress, data = StressAnxiety, hessian = TRUE)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.3686 -0.6704 -0.0024  0.6213  2.0510 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -4.0237     0.1442  -27.90   <2e-16 ***
stress        4.9414     0.4409   11.21   <2e-16 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   3.9608     0.2511  15.776  < 2e-16 ***
stress       -4.2733     0.7532  -5.674  1.4e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:   302 on 4 Df
Pseudo R-squared: 0.4748
Number of iterations in BFGS optimization: 16 
> AIC(sa_null, sa_stress)
          df       AIC
sa_null    2 -474.8960
sa_stress  4 -595.9202
> 1 - as.vector(logLik(sa_null)/logLik(sa_stress))
[1] 0.207021
> 
> ## visualization
> attach(StressAnxiety)
> plot(jitter(anxiety) ~ jitter(stress),
+   xlab = "Stress", ylab = "Anxiety",
+   xlim = c(0, 1), ylim = c(0, 1))
> lines(lowess(anxiety ~ stress))
> lines(fitted(sa_stress) ~ stress, lty = 2)
> lines(fitted(lm(anxiety ~ stress)) ~ stress, lty = 3)
> legend("topleft", c("lowess", "betareg", "lm"), lty = 1:3, bty = "n")
> detach(StressAnxiety)
> 
> ## see demo("SmithsonVerkuilen2006", package = "betareg") for more details
> 
> 
> 
> cleanEx()
> nameEx("WeatherTask")
> ### * WeatherTask
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WeatherTask
> ### Title: Weather Task With Priming and Precise and Imprecise
> ###   Probabilities
> ### Aliases: WeatherTask
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("WeatherTask", package = "betareg")
> library("flexmix")
Loading required package: lattice
> wt_betamix <- betamix(agreement ~ 1, data = WeatherTask, k = 2,
+   extra_components = extraComponent(type = "betareg", coef =
+     list(mean = 0, precision = 2)),
+   FLXconcomitant = FLXPmultinom(~ priming + eliciting))
> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("XBeta")
> ### * XBeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: XBeta
> ### Title: Create an Extended-Support Beta Distribution
> ### Aliases: XBeta mean.XBeta variance.XBeta skewness.XBeta kurtosis.XBeta
> ###   pdf.XBeta log_pdf.XBeta cdf.XBeta quantile.XBeta random.XBeta
> ###   support.XBeta is_discrete.XBeta is_continuous.XBeta
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three beta distributions
> X <- XBeta(
+   mu  = c(0.25, 0.50, 0.75),
+   phi = c(1, 1, 2),
+   nu = c(0, 0.1, 0.2)
+ )
> X
[1] "XBeta(mu = 0.25, phi = 1, nu = 0.0)" "XBeta(mu = 0.50, phi = 1, nu = 0.1)"
[3] "XBeta(mu = 0.75, phi = 2, nu = 0.2)"
> 
> ## compute moments of the distribution
> mean(X)
[1] 0.2500000 0.5000000 0.7886591
> variance(X)
[1] 0.09375000 0.15331441 0.08617379
> 
> ## support interval (minimum and maximum)
> support(X)
     min max
[1,]   0   1
[2,]   0   1
[3,]   0   1
> 
> ## it is only continuous when there are no point masses on the boundary
> is_continuous(X)
[1]  TRUE FALSE FALSE
> cdf(X, 0)
[1] 0.0000000 0.1864295 0.0239812
> cdf(X, 1, lower.tail = FALSE)
[1] 0.0000000 0.1864295 0.4695222
> 
> ## simulate random variables
> random(X, 5)
           r_1       r_2        r_3        r_4       r_5
[1,] 0.7497152 0.8385523 0.03196796 0.91882879 0.5454367
[2,] 0.1263742 1.0000000 0.00000000 0.07151503 0.0000000
[3,] 1.0000000 1.0000000 0.86031184 1.00000000 0.9764434
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ])
> hist(x[2, ])
> hist(x[3, ])
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(0.25, 0.5, 0.75)
> pdf(X, x)
[1] 0.6840925 0.5305165 0.6607051
> pdf(X, x, log = TRUE)
[1] -0.3796622 -0.6339043 -0.4144477
> log_pdf(X, x)
[1] -0.3796622 -0.6339043 -0.4144477
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.6453748 0.5000000 0.3189318
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.09331223 0.50000000 0.97152842
> 
> ## cdf() and quantile() are inverses (except at censoring points)
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
           q_0.05      q_0.5    q_0.95
[1,] 9.512588e-06 0.09331223 0.9118445
[2,] 0.000000e+00 0.50000000 1.0000000
[3,] 1.199277e-01 0.97152842 1.0000000
> quantile(X, p, elementwise = TRUE)
[1] 9.512588e-06 5.000000e-01 1.000000e+00
> quantile(X, p, elementwise = TRUE, drop = FALSE)
         quantile
[1,] 9.512588e-06
[2,] 5.000000e-01
[3,] 1.000000e+00
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]   0.2500000 0.2464581
[2,]   0.5000000 0.4949177
[3,]   0.7886591 0.7955785
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("XBetaX")
> ### * XBetaX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: XBetaX
> ### Title: Create an Extended-Support Beta Mixture Distribution
> ### Aliases: XBetaX mean.XBetaX variance.XBetaX skewness.XBetaX
> ###   kurtosis.XBetaX pdf.XBetaX log_pdf.XBetaX cdf.XBetaX quantile.XBetaX
> ###   random.XBetaX support.XBetaX is_discrete.XBetaX is_continuous.XBetaX
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three beta distributions
> X <- XBetaX(
+   mu  = c(0.25, 0.50, 0.75),
+   phi = c(1, 1, 2),
+   nu = c(0, 0.1, 0.2)
+ )
> X
[1] "XBetaX(mu = 0.25, phi = 1, nu = 0.0)"
[2] "XBetaX(mu = 0.50, phi = 1, nu = 0.1)"
[3] "XBetaX(mu = 0.75, phi = 2, nu = 0.2)"
> 
> ## compute moments of the distribution
> mean(X)
[1] 0.2500000 0.5000000 0.7812779
> variance(X)
[1] 0.09375000 0.14932803 0.08290156
> 
> ## support interval (minimum and maximum)
> support(X)
     min max
[1,]   0   1
[2,]   0   1
[3,]   0   1
> 
> ## it is only continuous when there are no point masses on the boundary
> is_continuous(X)
[1]  TRUE FALSE FALSE
> cdf(X, 0)
[1] 0.00000000 0.16127596 0.02230181
> cdf(X, 1, lower.tail = FALSE)
[1] 2.220446e-16 1.612760e-01 4.004398e-01
> 
> ## simulate random variables
> random(X, 5)
            r_1        r_2         r_3       r_4        r_5
[1,] 0.01770077 0.03196796 0.009185013 0.3511111 0.03417845
[2,] 0.03065274 0.00000000 0.159692910 0.4697419 0.62766314
[3,] 0.40195437 1.00000000 0.675081997 0.9255527 1.00000000
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ])
> hist(x[2, ])
> hist(x[3, ])
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(0.25, 0.5, 0.75)
> pdf(X, x)
[1] 0.6840925 0.5424706 0.7405552
> pdf(X, x, log = TRUE)
[1] -0.3796622 -0.6116213 -0.3003551
> log_pdf(X, x)
[1] -0.3796622 -0.6116213 -0.3003551
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.6453748 0.5000000 0.3312063
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.09331223 0.50000000 0.93231291
> 
> ## cdf() and quantile() are inverses (except at censoring points)
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
           q_0.05      q_0.5    q_0.95
[1,] 9.512588e-06 0.09331223 0.9118445
[2,] 0.000000e+00 0.50000000 1.0000000
[3,] 1.353857e-01 0.93231291 1.0000000
> quantile(X, p, elementwise = TRUE)
[1] 9.512588e-06 5.000000e-01 1.000000e+00
> quantile(X, p, elementwise = TRUE, drop = FALSE)
         quantile
[1,] 9.512588e-06
[2,] 5.000000e-01
[3,] 1.000000e+00
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]   0.2500000 0.2403159
[2,]   0.5000000 0.4935615
[3,]   0.7812779 0.7936076
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("betamix")
> ### * betamix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betamix
> ### Title: Finite Mixtures of Beta Regression for Rates and Proportions
> ### Aliases: betamix extraComponent fitted,FLXMRbeta-method
> ###   fitted,betamix-method posterior,betamix,ANY-method
> ###   clusters,betamix,ANY-method predict,FLXMRbeta-method
> ###   predict,FLXMRbetafix-method predict,betamix-method
> ### Keywords: regression cluster
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> ## data with two groups of dyslexic and non-dyslexic children
> data("ReadingSkills", package = "betareg")
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(4040)
> ## try to capture accuracy ~ iq relationship (without using dyslexia
> ## information) using two beta regression components and one additional
> ## extra component for a perfect reading score
> rs_mix <- betamix(accuracy ~ iq, data = ReadingSkills, k = 3,
+   nstart = 10, extra_components = extraComponent(type = "uniform",
+   coef = 0.99, delta = 0.01))
> 
> ## visualize result
> ## intensities based on posterior probabilities
> prob <- 2 * (posterior(rs_mix)[cbind(1:nrow(ReadingSkills),
+    clusters(rs_mix))] - 0.5)
> ## associated HCL colors
> col0 <- hcl(c(260, 0, 130), 65, 45, fixup = FALSE)
> col1 <- col0[clusters(rs_mix)]
> col2 <- hcl(c(260, 0, 130)[clusters(rs_mix)], 65 * abs(prob)^1.5,
+    95 - 50 * abs(prob)^1.5, fixup = FALSE)
> ## scatter plot
> plot(accuracy ~ iq, data = ReadingSkills, col = col2, pch = 19,
+    cex = 1.5, xlim = c(-2, 2))
> points(accuracy ~ iq, data = ReadingSkills, cex = 1.5, pch = 1,
+    col = col1)
> ## fitted lines
> iq <- -30:30/10
> cf <- rbind(coef(rs_mix, model = "mean", component = 1:2),
+    c(qlogis(0.99), 0))
> for(i in 1:3)
+    lines(iq, plogis(cf[i, 1] + cf[i, 2] * iq), lwd = 2,
+          col = col0[i])
> 
> ## refit the model including a concomitant variable model using the
> ## dyslexia information with some noise to avoid complete separation
> ## between concomitant variable and component memberships
> set.seed(4040)
> w <- rnorm(nrow(ReadingSkills), 
+            c(-1, 1)[as.integer(ReadingSkills$dyslexia)])
> 
> ## The argument FLXconcomitant can be omitted when specifying
> ## the model via a three part formula given by
> ## accuracy ~ iq | 1 | w
> ## The posteriors from the previously fitted model are used
> ## for initialization.
> library("flexmix")
Loading required package: lattice
> rs_mix2 <- betamix(accuracy ~ iq, data = ReadingSkills,
+   extra_components = extraComponent(type = "uniform",
+   coef = 0.99, delta = 0.01), cluster = posterior(rs_mix),
+   FLXconcomitant = FLXPmultinom(~w))
> coef(rs_mix2, which = "concomitant")
  (Intercept)       w
1      0.0000  0.0000
2      0.8114  1.0778
3     -0.1195 -0.3488
> summary(rs_mix2, which = "concomitant")
$Comp.2
            Estimate Std. Error z value Pr(>|z|)  
(Intercept)    0.821      0.882    0.93     0.35  
w              1.078      0.497    2.17     0.03 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$Comp.3
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   -0.113      0.812   -0.14     0.89
w             -0.346      0.452   -0.77     0.44

> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("betareg")
> ### * betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betareg
> ### Title: Beta Regression for Rates and Proportions
> ### Aliases: betareg betareg.fit
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> ## Section 4 from Ferrari and Cribari-Neto (2004)
> data("GasolineYield", package = "betareg")
> data("FoodExpenditure", package = "betareg")
> 
> ## Table 1
> gy <- betareg(yield ~ batch + temp, data = GasolineYield)
> summary(gy)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.875 -0.815  0.160  0.838  2.048 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.159571   0.182325  -33.78  < 2e-16 ***
batch1       1.727729   0.101229   17.07  < 2e-16 ***
batch2       1.322597   0.117902   11.22  < 2e-16 ***
batch3       1.572310   0.116105   13.54  < 2e-16 ***
batch4       1.059714   0.102360   10.35  < 2e-16 ***
batch5       1.133752   0.103523   10.95  < 2e-16 ***
batch6       1.040162   0.106036    9.81  < 2e-16 ***
batch7       0.543692   0.109127    4.98  6.3e-07 ***
batch8       0.495901   0.108926    4.55  5.3e-06 ***
batch9       0.385793   0.118593    3.25   0.0011 ** 
temp         0.010967   0.000413   26.58  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)      440        110       4  6.3e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 84.8 on 12 Df
Pseudo R-squared: 0.962
Number of iterations: 51 (BFGS) + 3 (Fisher scoring) 
> 
> ## Table 2
> fe_lin <- lm(I(food/income) ~ income + persons, data = FoodExpenditure)
> library("lmtest")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> bptest(fe_lin)

	studentized Breusch-Pagan test

data:  fe_lin
BP = 5.9, df = 2, p-value = 0.05

> fe_beta <- betareg(I(food/income) ~ income + persons, data = FoodExpenditure)
> summary(fe_beta)

Call:
betareg(formula = I(food/income) ~ income + persons, data = FoodExpenditure)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.782 -0.444  0.202  0.685  1.876 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.62255    0.22385   -2.78   0.0054 ** 
income      -0.01230    0.00304   -4.05  5.1e-05 ***
persons      0.11846    0.03534    3.35   0.0008 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    35.61       8.08    4.41    1e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 45.3 on 4 Df
Pseudo R-squared: 0.388
Number of iterations: 28 (BFGS) + 4 (Fisher scoring) 
> 
> ## nested model comparisons via Wald and LR tests
> fe_beta2 <- betareg(I(food/income) ~ income, data = FoodExpenditure)
> lrtest(fe_beta, fe_beta2)
Likelihood ratio test

Model 1: I(food/income) ~ income + persons
Model 2: I(food/income) ~ income
  #Df LogLik Df Chisq Pr(>Chisq)   
1   4   45.3                       
2   3   40.5 -1  9.65     0.0019 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> waldtest(fe_beta, fe_beta2)
Wald test

Model 1: I(food/income) ~ income + persons
Model 2: I(food/income) ~ income
  Res.Df Df Chisq Pr(>Chisq)    
1     34                        
2     35 -1  11.2      8e-04 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> ## Section 3 from online supplements to Simas et al. (2010)
> ## mean model as in gy above
> ## precision model with regressor temp
> gy2 <- betareg(yield ~ batch + temp | temp, data = GasolineYield)
> 
> ## MLE column in Table 19
> summary(gy2)

Call:
betareg(formula = yield ~ batch + temp | temp, data = GasolineYield)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.540 -0.779 -0.117  0.862  2.942 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -5.923236   0.183526  -32.27  < 2e-16 ***
batch1       1.601988   0.063856   25.09  < 2e-16 ***
batch2       1.297266   0.099100   13.09  < 2e-16 ***
batch3       1.565338   0.099739   15.69  < 2e-16 ***
batch4       1.030072   0.063288   16.28  < 2e-16 ***
batch5       1.154163   0.065643   17.58  < 2e-16 ***
batch6       1.019445   0.066351   15.36  < 2e-16 ***
batch7       0.622259   0.065632    9.48  < 2e-16 ***
batch8       0.564583   0.060185    9.38  < 2e-16 ***
batch9       0.359439   0.067141    5.35  8.6e-08 ***
temp         0.010359   0.000436   23.75  < 2e-16 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  1.36409    1.22578    1.11     0.27    
temp         0.01457    0.00362    4.03  5.7e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:   87 on 13 Df
Pseudo R-squared: 0.952
Number of iterations: 33 (BFGS) + 28 (Fisher scoring) 
> 
> ## LRT row in Table 18
> lrtest(gy, gy2)
Likelihood ratio test

Model 1: yield ~ batch + temp
Model 2: yield ~ batch + temp | temp
  #Df LogLik Df Chisq Pr(>Chisq)  
1  12   84.8                      
2  13   87.0  1  4.36      0.037 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> cleanEx()

detaching ‘package:lmtest’, ‘package:zoo’

> nameEx("betareg.control")
> ### * betareg.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betareg.control
> ### Title: Control Parameters for Beta Regression
> ### Aliases: betareg.control
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> data("GasolineYield", package = "betareg")
> 
> ## regression with phi as full model parameter
> gy1 <- betareg(yield ~ batch + temp, data = GasolineYield)
> gy1

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Coefficients (mean model with logit link):
(Intercept)       batch1       batch2       batch3       batch4       batch5  
     -6.160        1.728        1.323        1.572        1.060        1.134  
     batch6       batch7       batch8       batch9         temp  
      1.040        0.544        0.496        0.386        0.011  

Phi coefficients (precision model with identity link):
(phi)  
  440  

> 
> ## regression with phi as nuisance parameter
> gy2 <- betareg(yield ~ batch + temp, data = GasolineYield, phi = FALSE)
> gy2

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield, phi = FALSE)

Coefficients (mean model with logit link):
(Intercept)       batch1       batch2       batch3       batch4       batch5  
     -6.160        1.728        1.323        1.572        1.060        1.134  
     batch6       batch7       batch8       batch9         temp  
      1.040        0.544        0.496        0.386        0.011  

> 
> ## compare reported output
> coef(gy1)
(Intercept)      batch1      batch2      batch3      batch4      batch5 
   -6.15957     1.72773     1.32260     1.57231     1.05971     1.13375 
     batch6      batch7      batch8      batch9        temp       (phi) 
    1.04016     0.54369     0.49590     0.38579     0.01097   440.27839 
> coef(gy2)
(Intercept)      batch1      batch2      batch3      batch4      batch5 
   -6.15957     1.72773     1.32260     1.57231     1.05971     1.13375 
     batch6      batch7      batch8      batch9        temp 
    1.04016     0.54369     0.49590     0.38579     0.01097 
> summary(gy1)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.875 -0.815  0.160  0.838  2.048 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.159571   0.182325  -33.78  < 2e-16 ***
batch1       1.727729   0.101229   17.07  < 2e-16 ***
batch2       1.322597   0.117902   11.22  < 2e-16 ***
batch3       1.572310   0.116105   13.54  < 2e-16 ***
batch4       1.059714   0.102360   10.35  < 2e-16 ***
batch5       1.133752   0.103523   10.95  < 2e-16 ***
batch6       1.040162   0.106036    9.81  < 2e-16 ***
batch7       0.543692   0.109127    4.98  6.3e-07 ***
batch8       0.495901   0.108926    4.55  5.3e-06 ***
batch9       0.385793   0.118593    3.25   0.0011 ** 
temp         0.010967   0.000413   26.58  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)      440        110       4  6.3e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 84.8 on 12 Df
Pseudo R-squared: 0.962
Number of iterations: 51 (BFGS) + 3 (Fisher scoring) 
> summary(gy2)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield, phi = FALSE)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.875 -0.815  0.160  0.838  2.048 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.159571   0.182325  -33.78  < 2e-16 ***
batch1       1.727729   0.101229   17.07  < 2e-16 ***
batch2       1.322597   0.117902   11.22  < 2e-16 ***
batch3       1.572310   0.116105   13.54  < 2e-16 ***
batch4       1.059714   0.102360   10.35  < 2e-16 ***
batch5       1.133752   0.103523   10.95  < 2e-16 ***
batch6       1.040162   0.106036    9.81  < 2e-16 ***
batch7       0.543692   0.109127    4.98  6.3e-07 ***
batch8       0.495901   0.108926    4.55  5.3e-06 ***
batch9       0.385793   0.118593    3.25   0.0011 ** 
temp         0.010967   0.000413   26.58  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 84.8 on 12 Df
Pseudo R-squared: 0.962
Number of iterations: 51 (BFGS) + 3 (Fisher scoring) 
> 
> 
> 
> cleanEx()
> nameEx("betatree")
> ### * betatree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betatree
> ### Title: Beta Regression Trees
> ### Aliases: betatree plot.betatree print.betatree predict.betatree
> ###   sctest.betatree
> ### Keywords: tree
> 
> ### ** Examples
> 
> options(digits = 4)
> suppressWarnings(RNGversion("3.5.0"))
> 
> ## data with two groups of dyslexic and non-dyslexic children
> data("ReadingSkills", package = "betareg")
> ## additional random noise (not associated with reading scores)
> set.seed(1071)
> ReadingSkills$x1 <- rnorm(nrow(ReadingSkills))
> ReadingSkills$x2 <- runif(nrow(ReadingSkills))
> ReadingSkills$x3 <- factor(rnorm(nrow(ReadingSkills)) > 0)
> 
> ## fit beta regression tree: in each node
> ##   - accurcay's mean and precision depends on iq
> ##   - partitioning is done by dyslexia and the noise variables x1, x2, x3
> ## only dyslexia is correctly selected for splitting
> bt <- betatree(accuracy ~ iq | iq, ~ dyslexia + x1 + x2 + x3,
+   data = ReadingSkills, minsize = 10)
> plot(bt)
> 
> ## inspect result
> coef(bt)
  (Intercept)       iq (phi)_(Intercept) (phi)_iq
2      1.6565  1.46571             1.273    2.048
3      0.3809 -0.08623             4.808    0.826
> if(require("strucchange")) sctest(bt)
Loading required package: strucchange
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
$`1`
           dyslexia     x1     x2     x3
statistic 2.269e+01 8.5251 5.5699 1.0568
p.value   5.848e-04 0.9095 0.9987 0.9999

$`2`
          dyslexia     x1     x2     x3
statistic        0 6.4116 4.5170 4.2308
p.value         NA 0.8412 0.9752 0.7566

$`3`
NULL

> ## IGNORE_RDIFF_BEGIN
> summary(bt, node = 2)

Call:
betatree(formula = accuracy ~ iq | iq, data = ReadingSkills)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-1.821 -0.521  0.061  0.849  1.063 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    1.657      0.286    5.78  7.3e-09 ***
iq             1.466      0.248    5.92  3.2e-09 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    1.273      0.307    4.15  3.4e-05 ***
iq             2.048      0.331    6.19  5.9e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 39.4 on 4 Df
Pseudo R-squared: 0.149
Number of iterations: 17 (BFGS) + 2 (Fisher scoring) 
> summary(bt, node = 3)

Call:
betatree(formula = accuracy ~ iq | iq, data = ReadingSkills)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.455 -0.659 -0.079  0.813  1.610 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   0.3809     0.0486    7.83  4.8e-15 ***
iq           -0.0862     0.0549   -1.57     0.12    

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    4.808      0.414   11.61   <2e-16 ***
iq             0.826      0.395    2.09    0.036 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 27.3 on 4 Df
Pseudo R-squared: 0.0391
Number of iterations: 16 (BFGS) + 2 (Fisher scoring) 
> ## IGNORE_RDIFF_END
> 
> ## add a numerical variable with relevant information for splitting
> ReadingSkills$x4 <- rnorm(nrow(ReadingSkills), c(-1.5, 1.5)[ReadingSkills$dyslexia])
> 
> bt2 <- betatree(accuracy ~ iq | iq, ~ x1 + x2 + x3 + x4,
+   data = ReadingSkills, minsize = 10)
> plot(bt2)
> 
> ## inspect result
> coef(bt2)
  (Intercept)      iq (phi)_(Intercept) (phi)_iq
2      1.7060 1.47402             1.293   2.0841
3      0.5048 0.03391             3.131  -0.7684
> if(require("strucchange")) sctest(bt2)
$`1`
              x1     x2     x3       x4
statistic 8.5251 5.5699 1.0568 19.94405
p.value   0.9095 0.9987 0.9999  0.03485

$`2`
              x1     x2     x3     x4
statistic 8.9467 3.5888 3.5677 4.7049
p.value   0.5964 0.9985 0.9197 0.9848

$`3`
              x1     x2     x3     x4
statistic 5.5413 1.2373 4.8649 4.9921
p.value   0.6595 0.9997 0.7619 0.7432

> ## IGNORE_RDIFF_BEGIN
> summary(bt2, node = 2)

Call:
betatree(formula = accuracy ~ iq | iq, data = ReadingSkills)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-1.860 -0.492  0.026  0.815  1.014 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    1.706      0.292    5.85  4.9e-09 ***
iq             1.474      0.248    5.95  2.7e-09 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    1.293      0.312    4.14  3.4e-05 ***
iq             2.084      0.333    6.25  4.0e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 38.6 on 4 Df
Pseudo R-squared: 0.163
Number of iterations: 17 (BFGS) + 1 (Fisher scoring) 
> summary(bt2, node = 3)

Call:
betatree(formula = accuracy ~ iq | iq, data = ReadingSkills)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.090 -0.611 -0.178  0.642  2.572 

Coefficients (mean model with logit link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   0.5048     0.1245    4.05    5e-05 ***
iq            0.0339     0.0998    0.34     0.73    

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)    3.131      0.370    8.45   <2e-16 ***
iq            -0.768      0.359   -2.14    0.032 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 22.4 on 4 Df
Pseudo R-squared: 0.0378
Number of iterations: 16 (BFGS) + 1 (Fisher scoring) 
> ## IGNORE_RDIFF_END
> 
> 
> 
> cleanEx()

detaching ‘package:strucchange’, ‘package:sandwich’, ‘package:zoo’

> nameEx("gleverage")
> ### * gleverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gleverage
> ### Title: Generalized Leverage Values
> ### Aliases: gleverage gleverage.betareg
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> data("GasolineYield", package = "betareg")
> gy <- betareg(yield ~ batch + temp, data = GasolineYield)
> gleverage(gy)
     1      2      3      4      5      6      7      8      9     10     11 
0.2167 0.2517 0.3254 0.4542 0.2239 0.3201 0.5271 0.2819 0.3011 0.5066 0.1970 
    12     13     14     15     16     17     18     19     20     21     22 
0.2146 0.3054 0.4397 0.2909 0.3514 0.4049 0.2448 0.3570 0.4840 0.2154 0.1835 
    23     24     25     26     27     28     29     30     31     32 
0.2899 0.4701 0.2910 0.2982 0.5449 0.3677 0.6603 0.3181 0.2557 0.4569 
> 
> 
> 
> cleanEx()
> nameEx("plot.betareg")
> ### * plot.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.betareg
> ### Title: Diagnostic Plots for betareg Objects
> ### Aliases: plot.betareg
> ### Keywords: regression
> 
> ### ** Examples
> 
> data("GasolineYield", package = "betareg")
> 
> gy <- betareg(yield ~ gravity + pressure + temp10 + temp, data = GasolineYield)
> 
> par(mfrow = c(3, 2))
> plot(gy, which = 1:6)
> par(mfrow = c(1, 1))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("predict.betareg")
> ### * predict.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.betareg
> ### Title: Prediction Method for betareg Objects
> ### Aliases: predict.betareg pit.betareg rootogram.betareg
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> data("GasolineYield", package = "betareg")
> 
> gy2 <- betareg(yield ~ batch + temp | temp, data = GasolineYield)
> 
> cbind(
+   predict(gy2, type = "response"),
+   predict(gy2, type = "link"),
+   predict(gy2, type = "precision"),
+   predict(gy2, type = "variance"),
+   predict(gy2, type = "quantile", at = c(0.25, 0.5, 0.75))
+ )
                                      q_0.25   q_0.5  q_0.75
1  0.09997 -2.1976   77.56 1.145e-03 0.07549 0.09653 0.12074
2  0.18658 -1.4724  215.06 7.024e-04 0.16816 0.18561 0.20394
3  0.32143 -0.7472  596.36 3.651e-04 0.30842 0.32123 0.33422
4  0.47379 -0.1049 1471.75 1.693e-04 0.46500 0.47378 0.48256
5  0.08568 -2.3676   93.73 8.269e-04 0.06490 0.08273 0.10328
6  0.14212 -1.7978  208.89 5.809e-04 0.12525 0.14097 0.15774
7  0.26285 -1.0312  614.00 3.151e-04 0.25073 0.26259 0.27469
8  0.10324 -2.1617   85.88 1.066e-03 0.07972 0.10017 0.12344
9  0.17652 -1.5401  205.86 7.027e-04 0.15806 0.17547 0.19384
10 0.30245 -0.8357  554.46 3.798e-04 0.28916 0.30221 0.31547
11 0.07881 -2.4587  120.07 5.996e-04 0.06119 0.07647 0.09390
12 0.14365 -1.7853  309.57 3.961e-04 0.12981 0.14288 0.15665
13 0.24751 -1.1120  798.12 2.331e-04 0.23709 0.24730 0.25769
14 0.34394 -0.6458 1537.51 1.467e-04 0.33573 0.34387 0.35208
15 0.16957 -1.5887  342.81 4.096e-04 0.15556 0.16892 0.18287
16 0.27545 -0.9671  821.72 2.426e-04 0.26484 0.27527 0.28586
17 0.33691 -0.6771 1235.66 1.806e-04 0.32780 0.33683 0.34594
18 0.10548 -2.1378  191.40 4.904e-04 0.08984 0.10410 0.11962
19 0.23606 -1.1744  742.04 2.427e-04 0.22542 0.23583 0.24645
20 0.32316 -0.7393 1368.34 1.597e-04 0.31459 0.32308 0.33164
21 0.05383 -2.8665  120.07 4.207e-04 0.03893 0.05137 0.06608
22 0.07928 -2.4521  215.06 3.379e-04 0.06624 0.07798 0.09091
23 0.16906 -1.5923  720.73 1.946e-04 0.15949 0.16876 0.17831
24 0.27063 -0.9914 1677.97 1.176e-04 0.26326 0.27054 0.27789
25 0.08270 -2.4062  248.80 3.037e-04 0.07039 0.08158 0.09380
26 0.17116 -1.5774  798.12 1.775e-04 0.16202 0.17088 0.18000
27 0.31885 -0.7590 2523.27 8.604e-05 0.31257 0.31881 0.32509
28 0.12701 -1.9276  650.84 1.701e-04 0.11801 0.12663 0.13560
29 0.23661 -1.1714 1885.42 9.575e-05 0.22995 0.23651 0.24316
30 0.10508 -2.1420  798.12 1.177e-04 0.09759 0.10475 0.11221
31 0.11952 -1.9970  978.71 1.074e-04 0.11239 0.11926 0.12637
32 0.18402 -1.4894 1998.57 7.509e-05 0.17811 0.18391 0.18980
> 
> ## evaluate cumulative _p_robabilities for (small) new data set
> gyd <- GasolineYield[c(1, 5, 10), ]
> ## CDF at 0.1 for each observation
> predict(gy2, newdata = gyd, type = "probability", at = 0.1)
Warning: contrasts dropped from factor batch
        1         5        10 
5.407e-01 7.165e-01 6.053e-40 
> ## CDF at each combination of 0.1/0.2 and observations
> predict(gy2, newdata = gyd, type = "probability", at = c(0.1, 0.2))
Warning: contrasts dropped from factor batch
       p_0.1     p_0.2
1  5.407e-01 9.933e-01
5  7.165e-01 9.991e-01
10 6.053e-40 5.828e-09
> ## CDF at pairwise combinations of 0.1/0.2/0.3 and observations
> predict(gy2, newdata = gyd, type = "probability", at = c(0.1, 0.2, 0.3))
Warning: contrasts dropped from factor batch
     1      5     10 
0.5407 0.9991 0.4549 
> ## CDF at all combinations of 0.1/0.2/0.3 and observations
> predict(gy2, newdata = gyd, type = "probability", at = rbind(c(0.1, 0.2, 0.3)))
Warning: contrasts dropped from factor batch
       p_0.1     p_0.2  p_0.3
1  5.407e-01 9.933e-01 1.0000
5  7.165e-01 9.991e-01 1.0000
10 6.053e-40 5.828e-09 0.4549
> 
> 
> 
> cleanEx()
> nameEx("residuals.betareg")
> ### * residuals.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.betareg
> ### Title: Residuals Method for betareg Objects
> ### Aliases: residuals.betareg
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> data("GasolineYield", package = "betareg")
> 
> gy <- betareg(yield ~ gravity + pressure + temp10 + temp, data = GasolineYield)
> 
> gy_res <- cbind(
+   "quantile"   = residuals(gy, type = "quantile"),
+   "pearson"    = residuals(gy, type = "pearson"),
+   "deviance"   = residuals(gy, type = "deviance"),
+   "response"   = residuals(gy, type = "response"),
+   "weighted"   = residuals(gy, type = "weighted"),
+   "sweighted"  = residuals(gy, type = "sweighted"),
+   "sweighted2" = residuals(gy, type = "sweighted2")
+ )
> pairs(gy_res)
> 
> cor(gy_res)
           quantile pearson deviance response weighted sweighted sweighted2
quantile     1.0000  0.9980   0.9997   0.9659   0.9995    0.9995     0.9980
pearson      0.9980  1.0000   0.9984   0.9739   0.9956    0.9956     0.9941
deviance     0.9997  0.9984   1.0000   0.9682   0.9989    0.9989     0.9976
response     0.9659  0.9739   0.9682   1.0000   0.9609    0.9609     0.9652
weighted     0.9995  0.9956   0.9989   0.9609   1.0000    1.0000     0.9985
sweighted    0.9995  0.9956   0.9989   0.9609   1.0000    1.0000     0.9985
sweighted2   0.9980  0.9941   0.9976   0.9652   0.9985    0.9985     1.0000
> 
> 
> 
> cleanEx()
> nameEx("summary.betareg")
> ### * summary.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.betareg
> ### Title: Methods for betareg Objects
> ### Aliases: print.betareg summary.betareg print.summary.betareg
> ###   coef.betareg vcov.betareg bread.betareg estfun.betareg
> ###   coeftest.betareg logLik.betareg terms.betareg model.frame.betareg
> ###   model.matrix.betareg cooks.distance.betareg hatvalues.betareg
> ### Keywords: regression
> 
> ### ** Examples
> 
> options(digits = 4)
> 
> data("GasolineYield", package = "betareg")
> 
> gy2 <- betareg(yield ~ batch + temp | temp, data = GasolineYield)
> 
> summary(gy2)

Call:
betareg(formula = yield ~ batch + temp | temp, data = GasolineYield)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.540 -0.779 -0.117  0.862  2.942 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -5.923236   0.183526  -32.27  < 2e-16 ***
batch1       1.601988   0.063856   25.09  < 2e-16 ***
batch2       1.297266   0.099100   13.09  < 2e-16 ***
batch3       1.565338   0.099739   15.69  < 2e-16 ***
batch4       1.030072   0.063288   16.28  < 2e-16 ***
batch5       1.154163   0.065643   17.58  < 2e-16 ***
batch6       1.019445   0.066351   15.36  < 2e-16 ***
batch7       0.622259   0.065632    9.48  < 2e-16 ***
batch8       0.564583   0.060185    9.38  < 2e-16 ***
batch9       0.359439   0.067141    5.35  8.6e-08 ***
temp         0.010359   0.000436   23.75  < 2e-16 ***

Phi coefficients (precision model with log link):
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  1.36409    1.22578    1.11     0.27    
temp         0.01457    0.00362    4.03  5.7e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:   87 on 13 Df
Pseudo R-squared: 0.952
Number of iterations: 33 (BFGS) + 28 (Fisher scoring) 
> coef(gy2)
      (Intercept)            batch1            batch2            batch3 
         -5.92324           1.60199           1.29727           1.56534 
           batch4            batch5            batch6            batch7 
          1.03007           1.15416           1.01944           0.62226 
           batch8            batch9              temp (phi)_(Intercept) 
          0.56458           0.35944           0.01036           1.36409 
       (phi)_temp 
          0.01457 
> vcov(gy2)
                  (Intercept)     batch1     batch2     batch3     batch4
(Intercept)         3.368e-02 -4.124e-03 -8.216e-03 -8.839e-03 -3.672e-03
batch1             -4.124e-03  4.078e-03  2.483e-03  2.524e-03  2.189e-03
batch2             -8.216e-03  2.483e-03  9.821e-03  3.401e-03  2.395e-03
batch3             -8.839e-03  2.524e-03  3.401e-03  9.948e-03  2.427e-03
batch4             -3.672e-03  2.189e-03  2.395e-03  2.427e-03  4.005e-03
batch5             -4.461e-03  2.240e-03  2.548e-03  2.594e-03  2.206e-03
batch6             -3.902e-03  2.204e-03  2.439e-03  2.475e-03  2.178e-03
batch7             -3.007e-03  2.146e-03  2.267e-03  2.285e-03  2.133e-03
batch8             -6.259e-04  1.993e-03  1.804e-03  1.775e-03  2.013e-03
batch9             -1.801e-03  2.068e-03  2.031e-03  2.026e-03  2.072e-03
temp               -7.753e-05  4.999e-06  1.504e-05  1.657e-05  3.891e-06
(phi)_(Intercept)  -1.860e-02  1.682e-04  9.769e-04  1.420e-03  1.409e-04
(phi)_temp          4.618e-05  2.069e-07 -1.937e-06 -2.948e-06  6.530e-08
                      batch5     batch6     batch7     batch8     batch9
(Intercept)       -4.461e-03 -3.902e-03 -3.007e-03 -6.259e-04 -1.801e-03
batch1             2.240e-03  2.204e-03  2.146e-03  1.993e-03  2.068e-03
batch2             2.548e-03  2.439e-03  2.267e-03  1.804e-03  2.031e-03
batch3             2.594e-03  2.475e-03  2.285e-03  1.775e-03  2.026e-03
batch4             2.206e-03  2.178e-03  2.133e-03  2.013e-03  2.072e-03
batch5             4.309e-03  2.223e-03  2.156e-03  1.977e-03  2.065e-03
batch6             2.223e-03  4.402e-03  2.140e-03  2.003e-03  2.070e-03
batch7             2.156e-03  2.140e-03  4.308e-03  2.044e-03  2.078e-03
batch8             1.977e-03  2.003e-03  2.044e-03  3.622e-03  2.100e-03
batch9             2.065e-03  2.070e-03  2.078e-03  2.100e-03  4.508e-03
temp               5.827e-06  4.454e-06  2.259e-06 -3.585e-06 -7.000e-07
(phi)_(Intercept)  1.011e-03  5.045e-04 -4.523e-04 -1.307e-03 -3.533e-04
(phi)_temp        -2.185e-06 -8.969e-07  1.470e-06  3.675e-06  1.119e-06
                        temp (phi)_(Intercept) (phi)_temp
(Intercept)       -7.753e-05        -1.860e-02  4.618e-05
batch1             4.999e-06         1.682e-04  2.069e-07
batch2             1.504e-05         9.769e-04 -1.937e-06
batch3             1.657e-05         1.420e-03 -2.948e-06
batch4             3.891e-06         1.409e-04  6.530e-08
batch5             5.827e-06         1.011e-03 -2.185e-06
batch6             4.454e-06         5.045e-04 -8.969e-07
batch7             2.259e-06        -4.523e-04  1.470e-06
batch8            -3.585e-06        -1.307e-03  3.675e-06
batch9            -7.000e-07        -3.533e-04  1.119e-06
temp               1.902e-07         4.666e-05 -1.175e-07
(phi)_(Intercept)  4.666e-05         1.503e+00 -4.342e-03
(phi)_temp        -1.175e-07        -4.342e-03  1.309e-05
> logLik(gy2)
'log Lik.' 86.98 (df=13)
> AIC(gy2)
[1] -148
> 
> coef(gy2, model = "mean")
(Intercept)      batch1      batch2      batch3      batch4      batch5 
   -5.92324     1.60199     1.29727     1.56534     1.03007     1.15416 
     batch6      batch7      batch8      batch9        temp 
    1.01944     0.62226     0.56458     0.35944     0.01036 
> coef(gy2, model = "precision")
(Intercept)        temp 
    1.36409     0.01457 
> summary(gy2, phi = FALSE)

Call:
betareg(formula = yield ~ batch + temp | temp, data = GasolineYield)

Standardized weighted residuals 2:
   Min     1Q Median     3Q    Max 
-2.540 -0.779 -0.117  0.862  2.942 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -5.923236   0.183526  -32.27  < 2e-16 ***
batch1       1.601988   0.063856   25.09  < 2e-16 ***
batch2       1.297266   0.099100   13.09  < 2e-16 ***
batch3       1.565338   0.099739   15.69  < 2e-16 ***
batch4       1.030072   0.063288   16.28  < 2e-16 ***
batch5       1.154163   0.065643   17.58  < 2e-16 ***
batch6       1.019445   0.066351   15.36  < 2e-16 ***
batch7       0.622259   0.065632    9.48  < 2e-16 ***
batch8       0.564583   0.060185    9.38  < 2e-16 ***
batch9       0.359439   0.067141    5.35  8.6e-08 ***
temp         0.010359   0.000436   23.75  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:   87 on 13 Df
Pseudo R-squared: 0.952
Number of iterations: 33 (BFGS) + 28 (Fisher scoring) 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.809 0.116 13.936 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
